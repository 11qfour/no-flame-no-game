import numpy as np
from scipy.interpolate import splprep, splev
from typing import List, Dict, Tuple
import cv2
import math

class TrajectorySmoother:
    """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–≤–∏–∂–µ–Ω–∏—è –ª—é–¥–µ–π"""
    
    def __init__(self, smoothness_factor: float = 0.1):
        """
        Args:
            smoothness_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (0.01 - –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ, 1.0 - –ø–æ—á—Ç–∏ –ø—Ä—è–º—ã–µ)
        """
        self.smoothness_factor = max(0.01, min(1.0, smoothness_factor))
        print(f"üé® TrajectorySmoother –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é: {self.smoothness_factor}")
    
    def smooth_trajectory(self, trajectory: List[Dict]) -> List[Dict]:
        """
        –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        
        Args:
            trajectory: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ [{'x': x, 'y': y, 'frame': frame}, ...]
            
        Returns:
            –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        """
        if len(trajectory) < 3:
            return trajectory  # –ù–µ—á–µ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞—Ç—å
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏
            valid_points = []
            for point in trajectory:
                if isinstance(point, dict) and 'x' in point and 'y' in point:
                    try:
                        x = float(point['x'])
                        y = float(point['y'])
                        if not (np.isnan(x) or np.isnan(y) or np.isinf(x) or np.isinf(y)):
                            valid_points.append(point)
                    except (ValueError, TypeError):
                        continue
            
            if len(valid_points) < 3:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {len(valid_points)}")
                return trajectory
            
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            cleaned_points = self._remove_outliers(valid_points)
            cleaned_points = self._trim_static_segments(cleaned_points)
            cleaned_points = self._simplify_rdp(cleaned_points)
            if len(cleaned_points) < 3:
                return cleaned_points if cleaned_points else trajectory

            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥)
            smoothed_trajectory = self._moving_average(cleaned_points)
            return smoothed_trajectory
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é")
            return trajectory
    
    def _simple_smoothing(self, points: List[Dict]) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∫ fallback"""
        try:
            if len(points) < 2:
                return points
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
            smoothed = []
            for i in range(len(points) - 1):
                current = points[i]
                next_point = points[i + 1]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
                smoothed.append(current)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
                mid_x = (current['x'] + next_point['x']) // 2
                mid_y = (current['y'] + next_point['y']) // 2
                mid_frame = (current.get('frame', 0) + next_point.get('frame', 0)) // 2
                mid_timestamp = (current.get('timestamp', 0) + next_point.get('timestamp', 0)) / 2
                
                smoothed.append({
                    'x': mid_x,
                    'y': mid_y,
                    'frame': mid_frame,
                    'timestamp': mid_timestamp
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            smoothed.append(points[-1])
            
            print(f"üîÑ –ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {len(points)} ‚Üí {len(smoothed)} —Ç–æ—á–µ–∫")
            return smoothed
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {e}")
            return points

    def _remove_outliers(self, points: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª—è–µ—Ç —è–≤–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ä–µ–∑–∫–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞–º"""
        if len(points) < 3:
            return points
        coords = [(float(p['x']), float(p['y'])) for p in points]
        # –°–∫–æ—Ä–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
        step_distances = [math.hypot(coords[i+1][0]-coords[i][0], coords[i+1][1]-coords[i][1]) for i in range(len(coords)-1)]
        median_step = np.median(step_distances) if step_distances else 0
        if median_step == 0:
            median_step = 1.0
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        max_allowed = max(10 * median_step, 50.0)
        filtered = [points[0]]
        for i in range(1, len(points)-1):
            prev_pt = coords[i-1]
            curr_pt = coords[i]
            next_pt = coords[i+1]
            d_prev = math.hypot(curr_pt[0]-prev_pt[0], curr_pt[1]-prev_pt[1])
            d_next = math.hypot(next_pt[0]-curr_pt[0], next_pt[1]-curr_pt[1])
            # –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
            v1 = (curr_pt[0]-prev_pt[0], curr_pt[1]-prev_pt[1])
            v2 = (next_pt[0]-curr_pt[0], next_pt[1]-curr_pt[1])
            dot = v1[0]*v2[0] + v1[1]*v2[1]
            n1 = math.hypot(*v1)
            n2 = math.hypot(*v2)
            angle = 0
            if n1*n2 > 0:
                cos_a = max(-1.0, min(1.0, dot/(n1*n2)))
                angle = math.degrees(math.acos(cos_a))
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫—É, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ/–±—ã—Å—Ç—Ä–æ –∏–ª–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–∏–π –ø—Ä–∏ –º–∞–ª—ã—Ö —à–∞–≥–∞—Ö
            if d_prev > max_allowed or d_next > max_allowed:
                continue
            if angle > 170 and (d_prev < 8 and d_next < 8):
                continue
            filtered.append(points[i])
        filtered.append(points[-1])
        return filtered

    def _simplify_rdp(self, points: List[Dict]) -> List[Dict]:
        """–£–ø—Ä–æ—â–∞–µ—Ç –ª–æ–º–∞–Ω—É—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –†–∞–º–µ—Ä–∞‚Äî–î—É–≥–ª–∞—Å–∞‚Äî–ü–µ–∫–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º—É"""
        if len(points) < 3:
            return points
        epsilon = max(1.5, (1.0 - self.smoothness_factor) * 8.0)

        def point_line_distance(px, py, ax, ay, bx, by):
            if ax == bx and ay == by:
                return math.hypot(px-ax, py-ay)
            t = ((px-ax)*(bx-ax) + (py-ay)*(by-ay)) / (((bx-ax)**2) + ((by-ay)**2))
            t = max(0.0, min(1.0, t))
            proj_x = ax + t*(bx-ax)
            proj_y = ay + t*(by-ay)
            return math.hypot(px-proj_x, py-proj_y)

        def rdp(indices_start: int, indices_end: int, keep: List[bool]):
            ax, ay = points[indices_start]['x'], points[indices_start]['y']
            bx, by = points[indices_end]['x'], points[indices_end]['y']
            max_dist = -1.0
            index = -1
            for i in range(indices_start+1, indices_end):
                px, py = points[i]['x'], points[i]['y']
                d = point_line_distance(px, py, ax, ay, bx, by)
                if d > max_dist:
                    max_dist = d
                    index = i
            if max_dist > epsilon and index != -1:
                rdp(indices_start, index, keep)
                rdp(index, indices_end, keep)
            else:
                keep[indices_start] = True
                keep[indices_end] = True

        keep_mask = [False] * len(points)
        rdp(0, len(points)-1, keep_mask)
        simplified = [pt for pt, k in zip(points, keep_mask) if k]
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∞–π–Ω–∏—Ö —Ç–æ—á–µ–∫
        if not simplified or simplified[0] != points[0]:
            simplified = [points[0]] + simplified
        if simplified[-1] != points[-1]:
            simplified.append(points[-1])
        return simplified

    def _trim_static_segments(self, points: List[Dict]) -> List[Dict]:
        """–£–±–∏—Ä–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ —Å –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –º–∞—Ä–∫–µ—Ä—ã Start/End –±—ã–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Ö/–∫–æ–Ω—Ü–∞—Ö"""
        if len(points) < 3:
            return points
        coords = [(float(p['x']), float(p['y'])) for p in points]
        # –ï—Å–ª–∏ –≤—Å—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –ø–æ—á—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        total = sum(math.hypot(coords[i][0]-coords[i-1][0], coords[i][1]-coords[i-1][1]) for i in range(1, len(coords)))
        if total < 40.0:
            return points
        # –ü–æ—Ä–æ–≥ –¥–≤–∏–∂–µ–Ω–∏—è (–ø–∏–∫—Å–µ–ª–∏)
        threshold = 15.0
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å, –≥–¥–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø–æ—Ä–æ–≥
        acc = 0.0
        start_idx = 0
        for i in range(1, len(coords)):
            acc += math.hypot(coords[i][0]-coords[i-1][0], coords[i][1]-coords[i-1][1])
            if acc >= threshold:
                start_idx = i-1
                break
        # –° –∫–æ–Ω—Ü–∞
        acc = 0.0
        end_idx = len(coords)-1
        for i in range(len(coords)-1, 0, -1):
            acc += math.hypot(coords[i][0]-coords[i-1][0], coords[i][1]-coords[i-1][1])
            if acc >= threshold:
                end_idx = i
                break
        if start_idx >= end_idx:
            return points
        return points[start_idx:end_idx+1]

    def _moving_average(self, points: List[Dict], window: int = 5) -> List[Dict]:
        """–ü–ª–∞–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏–º –æ–∫–Ω–æ–º –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã"""
        n = len(points)
        if n <= 2:
            return points
        w = max(3, min(window, n if n % 2 == 1 else n-1))
        half = w // 2
        xs = [p['x'] for p in points]
        ys = [p['y'] for p in points]
        smoothed = []
        for i in range(n):
            left = max(0, i - half)
            right = min(n, i + half + 1)
            avg_x = int(np.mean(xs[left:right]))
            avg_y = int(np.mean(ys[left:right]))
            smoothed.append({
                'x': avg_x,
                'y': avg_y,
                'frame': points[i].get('frame', 0),
                'timestamp': points[i].get('timestamp', 0)
            })
        return smoothed
    
    def adjust_smoothness(self, new_smoothness: float):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        self.smoothness_factor = max(0.01, min(1.0, new_smoothness))
        print(f"üéõÔ∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.smoothness_factor}")
    
    def get_smoothness_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        return {
            'smoothness_factor': self.smoothness_factor,
            'description': self._get_smoothness_description()
        }
    
    def _get_smoothness_description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        if self.smoothness_factor < 0.05:
            return "–û—á–µ–Ω—å –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        elif self.smoothness_factor < 0.2:
            return "–ü–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        elif self.smoothness_factor < 0.5:
            return "–£–º–µ—Ä–µ–Ω–Ω–æ –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        else:
            return "–ü–æ—á—Ç–∏ –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏"
